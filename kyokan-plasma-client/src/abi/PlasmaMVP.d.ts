/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class PlasmaMVP {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    balances(arg0: string): TransactionObject<string>;

    txExits(
      arg0: number | string
    ): TransactionObject<{
      amount: string;
      committedFee: string;
      createdAt: string;
      owner: string;
      state: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    deposits(
      arg0: number | string
    ): TransactionObject<{
      owner: string;
      amount: string;
      createdAt: string;
      ethBlockNum: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    depositExits(
      arg0: number | string
    ): TransactionObject<{
      amount: string;
      committedFee: string;
      createdAt: string;
      owner: string;
      state: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    childChain(
      arg0: number | string
    ): TransactionObject<{
      root: string;
      numTxns: string;
      feeAmount: string;
      createdAt: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    balanceOf(_address: string): TransactionObject<string>;

    submitBlock(
      headers: (string | number[])[],
      txnsPerBlock: (number | string)[],
      feesPerBlock: (number | string)[],
      blockNum: number | string
    ): TransactionObject<void>;

    deposit(owner: string): TransactionObject<void>;

    startDepositExit(
      nonce: number | string,
      committedFee: number | string
    ): TransactionObject<void>;

    startTransactionExit(
      txPos: (number | string)[],
      txBytes: (string | number[]),
      proof: (string | number[]),
      confirmSignatures: (string | number[]),
      committedFee: number | string
    ): TransactionObject<void>;

    startFeeExit(blockNumber: number | string): TransactionObject<void>;

    challengeFeeMismatch(
      exitingTxPos: (number | string)[],
      challengingTxPos: (number | string)[],
      txBytes: (string | number[])[],
      proof: (string | number[])[]
    ): TransactionObject<void>;

    challengeExit(
      exitingTxPos: (number | string)[],
      challengingTxPos: (number | string)[],
      txBytes: (string | number[])[],
      proof: (string | number[])[],
      confirmSignature: (string | number[])[]
    ): TransactionObject<void>;

    finalizeDepositExits(): TransactionObject<void>;

    finalizeTransactionExits(): TransactionObject<void>;

    withdraw(): TransactionObject<string>;

    txIndexFactor(): TransactionObject<string>;
    maxTxnsPerBLock(): TransactionObject<string>;
    lastCommittedBlock(): TransactionObject<string>;
    blockIndexFactor(): TransactionObject<string>;
    totalWithdrawBalance(): TransactionObject<string>;
    depositNonce(): TransactionObject<string>;
    childChainBalance(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    AddedToBalances(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    BlockSubmitted(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Deposit(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    StartedTransactionExit(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    StartedDepositExit(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ChallengedExit(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    FinalizedExit(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): PlasmaMVP;
}
