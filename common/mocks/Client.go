// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import big "math/big"
import bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
import common "github.com/ethereum/go-ethereum/common"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Balance provides a mock function with given fields: addr
func (_m *Client) GetBalance(addr common.Address) (*big.Int, error) {
	ret := _m.Called(addr)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address) *big.Int); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGethTransactor provides a mock function with given fields: keyAddr
func (_m *Client) NewGethTransactor(keyAddr common.Address) *bind.TransactOpts {
	ret := _m.Called(keyAddr)

	var r0 *bind.TransactOpts
	if rf, ok := ret.Get(0).(func(common.Address) *bind.TransactOpts); ok {
		r0 = rf(keyAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bind.TransactOpts)
		}
	}

	return r0
}

// SignData provides a mock function with given fields: addr, data
func (_m *Client) SignData(addr *common.Address, data []byte) ([]byte, error) {
	ret := _m.Called(addr, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*common.Address, []byte) []byte); ok {
		r0 = rf(addr, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.Address, []byte) error); ok {
		r1 = rf(addr, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
